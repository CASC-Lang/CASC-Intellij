{
  parserClass="org.casc.lang.parser.CASCParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="CASC"
  psiImplClassSuffix="Impl"
  psiPackage="org.casc.lang.psi"
  psiImplPackage="org.casc.lang.psi.impl"

  elementTypeHolderClass="org.casc.lang.psi.CASCTypes"
  elementTypeClass="org.casc.lang.psi.CASCElementType"
  tokenTypeClass="org.casc.lang.psi.CASCTokenType"

  tokens = [
    COMMENT = 'regexp://.*'
  ]
}

cascFile                ::= packageDeclaration? usage* classDeclaration? implementation*

accessModifiers         ::= PUB | PROT | INTL | PRIV

mutableModifier         ::= MUT

type                    ::= (IDENTIFIER (DOUBLE_COLON IDENTIFIER)*)
complexType             ::= type | (OPEN_BRACKET (type | complexType) CLOSE_BRACKET)

packageDeclaration      ::= PACKAGE type

usage                   ::= USE type (AS IDENTIFIER) | (DOUBLE_COLON OPEN_BRACE usage (COMMA usage)+ CLOSE_BRACE)

classDeclaration        ::= accessModifiers? mutableModifier? CLASS IDENTIFIER (OPEN_BRACE classFields* CLOSE_BRACE)?

classFields             ::= (COMP OPEN_BRACE classFields CLOSE_BRACE) | (accessModifiers? mutableModifier? COLON field+)

field                   ::= IDENTIFIER COLON complexType

implementation          ::= IMPL IDENTIFIER (COLON type)? (OPEN_BRACE companionBlock? (functionDeclaration | constructorDeclaration)* CLOSE_BRACE)?

companionBlock          ::= COMP OPEN_BRACE statement* CLOSE_BRACE

functionDeclaration     ::= accessModifiers? mutableModifier? OVRD? FN IDENTIFIER OPEN_PARENTHESES ((SELF (COMMA parameterList)?) | parameterList?) CLOSE_PARENTHESES (COLON complexType)? OPEN_BRACE statement* CLOSE_BRACE

constructorDeclaration  ::= NEW OPEN_PARENTHESES parameterList? CLOSE_PARENTHESES (COLON (SELF | SUPER) OPEN_PARENTHESES argumentList CLOSE_PARENTHESES)? OPEN_BRACE statement* CLOSE_BRACE

parameterList           ::= IDENTIFIER COLON complexType (COMMA IDENTIFIER COLON complexType)*

statement               ::= variableDeclaration | ifStatement | blockStatement | returnStatement | expression

variableDeclaration     ::= MUT? IDENTIFIER COLON_EQUAL expression

ifStatement             ::= IF expression statement (ELSE statement)?

blockStatement          ::= OPEN_BRACE statement* CLOSE_BRACE

returnStatement         ::= RETURN expression?

expression              ::= conjunctionExpression

conjunctionExpression   ::= disjunctionExpression (DOUBLE_PIPE disjunctionExpression)*

disjunctionExpression   ::= equalityExpression (DOUBLE_AMPERSAND equalityExpression)*

equalityExpression      ::= comparisonExpression ((EQUAL_EQUAL | BANG_EQUAL) comparisonExpression)*

comparisonExpression    ::= infixOperationExpression ((GREATER | GREATER_EQUAL | LESSER | LESSER_EQUAL) infixOperationExpression)*

infixOperationExpression::= inclusiveORExpression (IS inclusiveORExpression)*

inclusiveORExpression   ::= exclusiveORExpression (PIPE exclusiveORExpression)*

exclusiveORExpression   ::= ANDExpression (HAT ANDExpression)*

ANDExpression           ::= shiftingExpression (AMPERSAND shiftingExpression)*

shiftingExpression      ::= additiveExpression ((DOUBLE_GREATER | DOUBLE_LESSER | TRIPLE_GREATER) additiveExpression)*

additiveExpression      ::= multiplicativeExpression ((PLUS | MINUS) multiplicativeExpression)*

multiplicativeExpression::= asExpression ((STAR | SLASH) asExpression)*

asExpression            ::= prefixUnaryExpression (AS prefixUnaryExpression)*

prefixUnaryExpression   ::= unaryOperators* postfixUnaryExpression

postfixUnaryExpression  ::= primaryExpression postfixUnarySuffix*

postfixUnarySuffix      ::= (DOUBLE_PLUS | DOUBLE_MINUS)
                        | callSuffix
                        | indexSuffix
                        | memberSuffix
                        | assignSuffix

primaryExpression       ::= parenthesizedExpression
                        | arrayExpression
                        | literalExpression
                        | identifierExpression
                        | constructorCallExpression
                        | selfExpression
                        | superExpression
                        | ifExpression

parenthesizedExpression ::= OPEN_PARENTHESES expression CLOSE_PARENTHESES

identifierExpression    ::= IDENTIFIER

selfExpression          ::= SELF

superExpression         ::= SUPER

ifExpression            ::= IF expression statement (ELSE statement)?

arrayExpression         ::= arraySizeDeclaration OPEN_BRACE argumentList CLOSE_BRACE

arraySizeDeclaration    ::= OPEN_BRACKET (type | arraySizeDeclaration)? SEMICOLON expression? CLOSE_BRACKET

unaryOperators          ::= PLUS
                        | DOUBLE_PLUS
                        | MINUS
                        | DOUBLE_MINUS
                        | TILDE
                        | BANG

callSuffix              ::= OPEN_PARENTHESES argumentList CLOSE_PARENTHESES

indexSuffix             ::= OPEN_BRACKET expression CLOSE_BRACKET

memberSuffix            ::= DOT | DOUBLE_COLON

assignSuffix            ::= EQUAL expression

constructorCallExpression   ::= NEW type OPEN_PARENTHESES argumentList CLOSE_PARENTHESES

argumentList            ::= (expression (COMMA expression)*)?

literalExpression       ::= NULL
                        | TRUE
                        | FALSE
                        | (DOUBLE_QUOTE (STRING_CHAR | ESCAPED_STRING_CHAR)* DOUBLE_QUOTE)
                        | (QUOTE (STRING_CHAR | ESCAPED_STRING_CHAR)* QUOTE)
                        | INTEGER_LITERAL
                        | FLOAT_LITERAL
